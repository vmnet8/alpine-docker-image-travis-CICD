sudo: required
addons:
  apt:
    update: true
    packages:
    - docker-ce
services:
- docker
before_install:
script:
- export DOCKER_CLI_EXPERIMENTAL=enabled
- source sha_function.sh
- result1=$(compare_alpine "latest" "amd64")
- result2=$(compare_balena "latest" "rpi-3.11")
#- create_manifest
#- sha1=$(get_manifest_sha alpine latest amd64)
#- sha2=$(get_manifest_sha "vmnet8/alpine" latest amd64)
#- echo "1 is ${sha1}"
#- echo "2 is ${sha2}"
#- sha3=$(get_tag_sha "balenalib/raspberry-pi-alpine:latest")
#- sha4=$(get_tag_sha "vmnet8/alpine-tags:rpi-3.11")
#- echo "3 is ${sha3}"
#- echo "4 is ${sha4}"
#- compare_sha ${sha1} ${sha2}

#- docker manifest inspect alpine:latest  > manifest.json
#- shatag=$(docker manifest inspect alpine:latest |jq .manifests[0].digest  manifest.json |sed -e 's/^"//' -e 's/"$//')
#- echo $shatag
#- dockertag="$(date +%Y%m%d%H%M)"
#- docker manifest create vmnet8/alpine:$dockertag alpine@$shatag balenalib/raspberry-pi-alpine:latest
#- docker manifest create vmnet8/alpine:latest alpine@$shatag balenalib/raspberry-pi-alpine:latest
#- echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
before_deploy:
- create_manifest
deploy:
- provider: script
  script: echo "create_manifest from deploy echo" && echo "push manifest"
  on:
    all_branches: true
    #condition: " $(compare_sha $sha1 $sha2) = 1" or " $(compare_sha $sha3 $sha4) = 1"
#    condition: "$result1 = 'will create manifest' " or "$result2 = 'will create manifest' "
#    condition: "$create_manifest"  ture
#deploy:
#- provider: script
#  script: docker manifest push vmnet8/alpine:$dockertag
#  on:
#    all_branches: true
env:
  global:
  - secure: R+mSAK87xrYZCtiPbtu2WyiKV900lTnIErn2QtQz2DDz6ed0+dROeQ+yjANiaRgUsclAEsK2cq6E+3IkjOTukZchmth1H4J5MIkRu5a6zb8ZwxBPvjJgcLHYMBiMLp6u8FyyKNPYM86Qc7H/jCc4F0bb/unZGikiHwzdyEMd0wxXs5g/DnUtQanqKKw20yhM8HpzdyYNhR1fx7jwvCuRspmRovTjSqP/zm0S9/RzAl9BpjaI4s9MLX2fSMzELtnZ0nGo1AL6Qc0lFKhaMNdAQ/mhyjgj083cq7PAp4xYZg4QClXoCOAEgaKzb9mkiAE741+5LV79a1dHyxo3z5/Qry/ZlUrOIJ8IIZ8nU3h6zA9A0nJbYW2u1/2dLlf2pIphM+TUE3MTuE5hvEZd4mTLl7Cf9NDKVA3aI4v6zGD57AjM+Zi3+lGU85cOGBQO8kYjR1VRfVQX1OKQKbpCKj+h5d86xEdWlshY4cZb0MK1Xy1zJgTwqX6AEOQJ3N8J3c4DBYNTN4pP9rdaN7h/q+47kldsdYJlSK72IqedVPOloGpzBo3n67BlIkSYG47UMJgzDxgPjK/lzosMWLjBFGUxgkPXswPulFWEWR0+qK5663k/6Wv3/mke4X7hWtXMM9zH0xFvqxSr8fakMiRySml14pgbEKsz4vDF2C7XaALBJjc=
